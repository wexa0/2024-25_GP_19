import 'package:cloud_firestore/cloud_firestore.dart';

class Task {
  final String taskID;
  String title;
  DateTime scheduledDate;
  int priority;
  bool reminder;
  List<int> timer;
  String note;
  int completionStatus;
  String userID;

  Task({
    required this.taskID,
    required this.title,
    required this.scheduledDate,
    required this.priority,
    required this.reminder,
    required this.timer,
    required this.note,
    required this.completionStatus,
    required this.userID,
  });

  // Add a new task
  static Future<void> addTask(Task task) async {
    await FirebaseFirestore.instance.collection('Task').doc(task.taskID).set({
      'title': task.title,
      'scheduledDate': task.scheduledDate,
      'priority': task.priority,
      'reminder': task.reminder,
      'timer': task.timer,
      'note': task.note,
      'completionStatus': task.completionStatus,
      'userID': task.userID,
    });
  }

  // Delete a task
  static Future<void> deleteTask(String taskID) async {
    await FirebaseFirestore.instance.collection('Task').doc(taskID).delete();
  }

  // Update a task
  static Future<void> updateTask(Task task) async {
    await FirebaseFirestore.instance.collection('Task').doc(task.taskID).update({
      'title': task.title,
      'scheduledDate': task.scheduledDate,
      'priority': task.priority,
      'reminder': task.reminder,
      'timer': task.timer,
      'note': task.note,
      'completionStatus': task.completionStatus,
    });
  }

  // Toggle task completion status
  Future<void> toggleCompletion() async {
    completionStatus = (completionStatus == 2) ? 0 : 2;
    await FirebaseFirestore.instance.collection('Task').doc(taskID).update({
      'completionStatus': completionStatus,
    });
  }

  // Fetch tasks for a user
  static Future<List<Task>> fetchTasks(String userID) async {
    QuerySnapshot taskSnapshot = await FirebaseFirestore.instance
        .collection('Task')
        .where('userID', isEqualTo: userID)
        .get();

    return taskSnapshot.docs.map((doc) {
      Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
      return Task(
        taskID: doc.id,
        title: data['title'],
        scheduledDate: (data['scheduledDate'] as Timestamp).toDate(),
        priority: data['priority'],
        reminder: data['reminder'],
        timer: List<int>.from(data['timer']),
        note: data['note'],
        completionStatus: data['completionStatus'],
        userID: data['userID'],
      );
    }).toList();
  }
}
