import 'package:cloud_firestore/cloud_firestore.dart';



class Category {
  final String categoryID;
  final String categoryName;
  final String userID;

  Category({
    required this.categoryID,
    required this.categoryName,
    required this.userID,
  });

  // Add a new category
  static Future<void> addCategory(Category category) async {
    await FirebaseFirestore.instance.collection('Category').doc(category.categoryID).set({
      'categoryName': category.categoryName,
      'userID': category.userID,
      'taskIDs': [],
    });
  }

  // Link a task to an existing category
  static Future<void> linkTaskToCategory(String categoryID, String taskID) async {
    await FirebaseFirestore.instance.collection('Category').doc(categoryID).update({
      'taskIDs': FieldValue.arrayUnion([taskID]),
    });
  }

  // Delete a category
  static Future<Map<String, dynamic>> fetchCategoriesForUser(String userID) async {
  FirebaseFirestore firestore = FirebaseFirestore.instance;
  QuerySnapshot categorySnapshot = await firestore
      .collection('Category')
      .where('userID', isEqualTo: userID)
      .get();

  Map<String, List<String>> categoryTaskMap = {};
  Set<String> categorySet = {'All', 'Uncategorized'};

  for (var doc in categorySnapshot.docs) {
    String categoryName = doc['categoryName'];
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    List<dynamic> taskIDs = data['taskIDs'] ?? [];

    categorySet.add(categoryName);

    for (var taskId in taskIDs) {
      categoryTaskMap.putIfAbsent(taskId, () => []).add(categoryName);
    }
  }

  return {
    'categories': categorySet.toList(), // Ensure this is a List<String>
    'taskCategoryMap': categoryTaskMap, // This is Map<String, List<String>>
  };
}
}

